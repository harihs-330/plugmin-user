// Code generated by MockGen. DO NOT EDIT.
// Source: user/internal/repo (interfaces: UserImply)

// Package mockrepo is a generated GoMock package.
package mockrepo

import (
	reflect "reflect"
	time "time"
	entities "user/internal/entities"

	gomock "github.com/golang/mock/gomock"
)

// MockUserImply is a mock of UserImply interface.
type MockUserImply struct {
	ctrl     *gomock.Controller
	recorder *MockUserImplyMockRecorder
}

// MockUserImplyMockRecorder is the mock recorder for MockUserImply.
type MockUserImplyMockRecorder struct {
	mock *MockUserImply
}

// NewMockUserImply creates a new mock instance.
func NewMockUserImply(ctrl *gomock.Controller) *MockUserImply {
	mock := &MockUserImply{ctrl: ctrl}
	mock.recorder = &MockUserImplyMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserImply) EXPECT() *MockUserImplyMockRecorder {
	return m.recorder
}

// AddUserPermissions mocks base method.
func (m *MockUserImply) AddUserPermissions(arg0 entities.UserProjectPermissions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddUserPermissions", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddUserPermissions indicates an expected call of AddUserPermissions.
func (mr *MockUserImplyMockRecorder) AddUserPermissions(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddUserPermissions", reflect.TypeOf((*MockUserImply)(nil).AddUserPermissions), arg0)
}

// CreateUser mocks base method.
func (m *MockUserImply) CreateUser(arg0 entities.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockUserImplyMockRecorder) CreateUser(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockUserImply)(nil).CreateUser), arg0)
}

// FetchPermissionIDs mocks base method.
func (m *MockUserImply) FetchPermissionIDs(arg0, arg1 string) (map[string][]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchPermissionIDs", arg0, arg1)
	ret0, _ := ret[0].(map[string][]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchPermissionIDs indicates an expected call of FetchPermissionIDs.
func (mr *MockUserImplyMockRecorder) FetchPermissionIDs(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchPermissionIDs", reflect.TypeOf((*MockUserImply)(nil).FetchPermissionIDs), arg0, arg1)
}

// FetchPermissionNames mocks base method.
func (m *MockUserImply) FetchPermissionNames(arg0 []string) (map[string]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchPermissionNames", arg0)
	ret0, _ := ret[0].(map[string]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchPermissionNames indicates an expected call of FetchPermissionNames.
func (mr *MockUserImplyMockRecorder) FetchPermissionNames(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchPermissionNames", reflect.TypeOf((*MockUserImply)(nil).FetchPermissionNames), arg0)
}

// FetchUserByEmail mocks base method.
func (m *MockUserImply) FetchUserByEmail(arg0 string) (entities.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchUserByEmail", arg0)
	ret0, _ := ret[0].(entities.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchUserByEmail indicates an expected call of FetchUserByEmail.
func (mr *MockUserImplyMockRecorder) FetchUserByEmail(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchUserByEmail", reflect.TypeOf((*MockUserImply)(nil).FetchUserByEmail), arg0)
}

// GetPermissions mocks base method.
func (m *MockUserImply) GetPermissions(arg0, arg1 string) (map[string]map[string]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPermissions", arg0, arg1)
	ret0, _ := ret[0].(map[string]map[string]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPermissions indicates an expected call of GetPermissions.
func (mr *MockUserImplyMockRecorder) GetPermissions(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPermissions", reflect.TypeOf((*MockUserImply)(nil).GetPermissions), arg0, arg1)
}

// InsertTokens mocks base method.
func (m *MockUserImply) InsertTokens(arg0 []entities.Token, arg1 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertTokens", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertTokens indicates an expected call of InsertTokens.
func (mr *MockUserImplyMockRecorder) InsertTokens(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertTokens", reflect.TypeOf((*MockUserImply)(nil).InsertTokens), arg0, arg1)
}

// ValidateToken mocks base method.
func (m *MockUserImply) ValidateToken(arg0 string) (string, time.Time, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateToken", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(time.Time)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ValidateToken indicates an expected call of ValidateToken.
func (mr *MockUserImplyMockRecorder) ValidateToken(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateToken", reflect.TypeOf((*MockUserImply)(nil).ValidateToken), arg0)
}
