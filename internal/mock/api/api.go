// Code generated by MockGen. DO NOT EDIT.
// Source: user/adapter/apihook (interfaces: Connector)

// Package mockapi is a generated GoMock package.
package mockapi

import (
	context "context"
	reflect "reflect"
	apihook "user/adapter/apihook"

	gomock "github.com/golang/mock/gomock"
)

// MockConnector is a mock of Connector interface.
type MockConnector struct {
	ctrl     *gomock.Controller
	recorder *MockConnectorMockRecorder
}

// MockConnectorMockRecorder is the mock recorder for MockConnector.
type MockConnectorMockRecorder struct {
	mock *MockConnector
}

// NewMockConnector creates a new mock instance.
func NewMockConnector(ctrl *gomock.Controller) *MockConnector {
	mock := &MockConnector{ctrl: ctrl}
	mock.recorder = &MockConnectorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConnector) EXPECT() *MockConnectorMockRecorder {
	return m.recorder
}

// GET mocks base method.
func (m *MockConnector) GET(arg0 context.Context, arg1 apihook.Params, arg2 interface{}) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GET", arg0, arg1, arg2)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GET indicates an expected call of GET.
func (mr *MockConnectorMockRecorder) GET(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GET", reflect.TypeOf((*MockConnector)(nil).GET), arg0, arg1, arg2)
}

// PATCH mocks base method.
func (m *MockConnector) PATCH(arg0 context.Context, arg1 apihook.Params, arg2 interface{}) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PATCH", arg0, arg1, arg2)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PATCH indicates an expected call of PATCH.
func (mr *MockConnectorMockRecorder) PATCH(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PATCH", reflect.TypeOf((*MockConnector)(nil).PATCH), arg0, arg1, arg2)
}

// POST mocks base method.
func (m *MockConnector) POST(arg0 context.Context, arg1 apihook.Params, arg2 interface{}) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "POST", arg0, arg1, arg2)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// POST indicates an expected call of POST.
func (mr *MockConnectorMockRecorder) POST(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "POST", reflect.TypeOf((*MockConnector)(nil).POST), arg0, arg1, arg2)
}

// Request mocks base method.
func (m *MockConnector) Request(arg0 context.Context, arg1 apihook.Params, arg2 interface{}) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Request", arg0, arg1, arg2)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Request indicates an expected call of Request.
func (mr *MockConnectorMockRecorder) Request(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Request", reflect.TypeOf((*MockConnector)(nil).Request), arg0, arg1, arg2)
}
