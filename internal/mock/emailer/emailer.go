// Code generated by MockGen. DO NOT EDIT.
// Source: user/adapter/emailer (interfaces: Emailer)

// Package mockemailer is a generated GoMock package.
package mockemailer

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockEmailer is a mock of Emailer interface.
type MockEmailer struct {
	ctrl     *gomock.Controller
	recorder *MockEmailerMockRecorder
}

// MockEmailerMockRecorder is the mock recorder for MockEmailer.
type MockEmailerMockRecorder struct {
	mock *MockEmailer
}

// NewMockEmailer creates a new mock instance.
func NewMockEmailer(ctrl *gomock.Controller) *MockEmailer {
	mock := &MockEmailer{ctrl: ctrl}
	mock.recorder = &MockEmailerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEmailer) EXPECT() *MockEmailerMockRecorder {
	return m.recorder
}

// Send mocks base method.
func (m *MockEmailer) Send(arg0, arg1 string, arg2, arg3, arg4, arg5 []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockEmailerMockRecorder) Send(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockEmailer)(nil).Send), arg0, arg1, arg2, arg3, arg4, arg5)
}

// SenderEmail mocks base method.
func (m *MockEmailer) SenderEmail() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SenderEmail")
	ret0, _ := ret[0].(string)
	return ret0
}

// SenderEmail indicates an expected call of SenderEmail.
func (mr *MockEmailerMockRecorder) SenderEmail() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SenderEmail", reflect.TypeOf((*MockEmailer)(nil).SenderEmail))
}
